#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "deviceDataStruct.h"
#include "globals.glsl"
#include "random.glsl"
hitAttributeEXT vec2 bary;


layout(location = 0) rayPayloadInEXT hitPayload prd;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(set = 1, binding = eObjDescs, scalar) buffer ObjDesc_ { ObjDesc i[]; } objDesc;
layout(set = 1, binding = eTextures) uniform sampler2D[] textureSamplers;
layout(set = 1, binding = eCubeMap) uniform samplerCube cubeMapTexture;


layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; };
layout(buffer_reference, scalar) buffer Indices {ivec3 i[]; };
layout(buffer_reference, scalar) buffer Materials { GltfShadeMaterial m[]; };
layout(buffer_reference, scalar) buffer MatIndices { int i[]; };


void main()
{
    // Object data
    ObjDesc    objResource = objDesc.i[gl_InstanceCustomIndexEXT];
    MatIndices matIndices  = MatIndices(objResource.materialIndexAddress);
    Materials  materials   = Materials(objResource.materialAddress);
    Indices    indices     = Indices(objResource.indexAddress);
    Vertices   vertices    = Vertices(objResource.vertexAddress);

   

    //     // Material of the object 
    int               matIdx = matIndices.i[gl_PrimitiveID];
    GltfShadeMaterial mat    = materials.m[matIdx];


    float baseColorAlpha = mat.pbrBaseColorFactor.a;
    if(mat.pbrBaseColorTexture > -1)
    {
        // Indices of the triangle
        ivec3 ind = indices.i[gl_PrimitiveID];

        //     // Vertex of the triangle
        Vertex v0 = vertices.v[ind.x];
        Vertex v1 = vertices.v[ind.y];
        Vertex v2 = vertices.v[ind.z];

        //     const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);
        const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);

        // Computing the coordinates of the hit position
        const vec3 pos      = v0.pos * barycentrics.x + v1.pos * barycentrics.y + v2.pos * barycentrics.z;
        const vec3 worldPos = vec3(gl_ObjectToWorldEXT * vec4(pos, 1.0)); // Transforming the position to world space

        // Computing the normal at hit position 
        const vec3 normal      = v0.normal * barycentrics.x + v1.normal * barycentrics.y + v2.normal * barycentrics.z;
        const vec3 worldNormal = vec3(normal * gl_WorldToObjectEXT); // Transforming the normal to world space

        

        vec2 texCoord = v0.texCoord * barycentrics.x + v1.texCoord * barycentrics.y + v2.texCoord * barycentrics.z;

        baseColorAlpha *= textureLod(textureSamplers[nonuniformEXT(mat.pbrBaseColorTexture)], texCoord, 0).a;

    }

    float opactiy;
    if(mat.alphaMode == ALPHA_MASK)
    {
        opactiy = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
    }
    else if(mat.alphaMode == ALPHA_OPAQUE)
    {
        opactiy = 1.0;
    }
    else 
    {
        opactiy = baseColorAlpha;
    }

    if(rnd(prd.seed) > opactiy)
        ignoreIntersectionEXT;

}